name: CatScreeningML CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Mintのセットアップ
  setup_mint:
    name: Setup Mint
    uses: ./.github/workflows/setup-mint.yml
    permissions:
      contents: read

  # コード品質チェック
  code_quality:
    name: Code Quality Check
    needs: setup_mint
    uses: ./.github/workflows/code-quality.yml

  # プロジェクトのビルド (テスト用)
  build_for_tests:
    name: Build Project for Testing
    needs: setup_mint
    uses: ./.github/workflows/build-for-testing.yml

  # --- ユニットテストを並列で実行 --- 
  run_binary_tests:
    name: Run BinaryTests
    needs: build_for_tests
    uses: ./.github/workflows/binary-tests.yml
    with:
      derived_data_artifact_name: ${{ needs.build_for_tests.outputs.derived_data_artifact_name }}
      derived_data_path_on_runner: ${{ needs.build_for_tests.outputs.derived_data_path_on_runner }}

  run_multi_class_tests:
    name: Run MultiClassTests
    needs: build_for_tests
    uses: ./.github/workflows/multi-class-tests.yml
    with:
      derived_data_artifact_name: ${{ needs.build_for_tests.outputs.derived_data_artifact_name }}
      derived_data_path_on_runner: ${{ needs.build_for_tests.outputs.derived_data_path_on_runner }}

  run_multi_label_tests:
    name: Run MultiLabelTests
    needs: build_for_tests
    uses: ./.github/workflows/multi-label-tests.yml
    with:
      derived_data_artifact_name: ${{ needs.build_for_tests.outputs.derived_data_artifact_name }}
      derived_data_path_on_runner: ${{ needs.build_for_tests.outputs.derived_data_path_on_runner }}

  run_ovr_tests:
    name: Run OvRTests
    needs: build_for_tests
    uses: ./.github/workflows/ovr-tests.yml
    with:
      derived_data_artifact_name: ${{ needs.build_for_tests.outputs.derived_data_artifact_name }}
      derived_data_path_on_runner: ${{ needs.build_for_tests.outputs.derived_data_path_on_runner }}

  run_ovo_tests:
    name: Run OvOTests
    needs: build_for_tests
    uses: ./.github/workflows/ovo-tests.yml
    with:
      derived_data_artifact_name: ${{ needs.build_for_tests.outputs.derived_data_artifact_name }}
      derived_data_path_on_runner: ${{ needs.build_for_tests.outputs.derived_data_path_on_runner }}
  
  # テスト結果レポート生成
  test_report:
    name: Aggregate Test Results
    needs: 
      - run_binary_tests
      - run_multi_class_tests
      - run_multi_label_tests
      - run_ovr_tests
      - run_ovo_tests
    if: always()
    uses: ./.github/workflows/test-reporter.yml
    with:
      binary_tests_result: ${{ needs.run_binary_tests.outputs.test_result }}
      multi_class_tests_result: ${{ needs.run_multi_class_tests.outputs.test_result }}
      multi_label_tests_result: ${{ needs.run_multi_label_tests.outputs.test_result }}
      ovr_tests_result: ${{ needs.run_ovr_tests.outputs.test_result }}
      ovo_tests_result: ${{ needs.run_ovo_tests.outputs.test_result }}

  # コードレビュー - PRの場合のみ実行
  code_review:
    name: Code Review
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read
    uses: ./.github/workflows/copilot-review.yml
    with:
      pr_number: ${{ github.event.pull_request.number }}
    secrets: inherit
    
  # ビルド完了通知
  notify_completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: 
      - code_quality
      - test_report
      - code_review
      - run_binary_tests
      - run_multi_class_tests
      - run_multi_label_tests
      - run_ovr_tests
      - run_ovo_tests
    if: always()
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Determine Overall Status and Icon
        id: status_check
        run: |
          # Default to failure
          final_status="failure"
          final_icon="❌"
          final_message="CI Pipeline finished with failures."

          # Check if all critical preceding jobs succeeded
          if [[ "${{ needs.code_quality.result }}" == "success" && \
                "${{ needs.test_report.outputs.overall_test_result }}" == "success" && \
                ("${{ github.event_name }}" != "pull_request" || "${{ needs.code_review.result }}" == "success" || "${{ needs.code_review.result }}" == "skipped") ]]; then
            final_status="success"
            final_icon="✅"
            final_message="CI Pipeline Completed Successfully!"
          fi
          echo "status=$final_status" >> $GITHUB_OUTPUT
          echo "icon=$final_icon" >> $GITHUB_OUTPUT
          echo "message=$final_message" >> $GITHUB_OUTPUT
      
      - name: Add Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const cq_status = '${{ needs.code_quality.result }}' === 'success' ? '✅' : ('${{ needs.code_quality.result }}' === 'skipped' ? '⏭️' : '❌');
            const test_status = '${{ needs.test_report.outputs.overall_test_result }}' === 'success' ? '✅' : ('${{ needs.test_report.outputs.overall_test_result }}' === 'skipped' ? '⏭️' : '❌');
            const review_status = '${{ needs.code_review.result }}' === 'success' ? '✅' : ('${{ needs.code_review.result }}' === 'skipped' ? '⏭️' : '❌');

            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `## CI Pipeline Completed ${{ steps.status_check.outputs.icon }}\n              
              ${{ steps.status_check.outputs.message }}\n              
              ### ステータス概要:
              - コード品質チェック: ${cq_status}
              - ビルドとテスト全体: ${test_status}
              -   BinaryTests: ${{ needs.run_binary_tests.result == 'success' && '✅' || (needs.run_binary_tests.result == 'skipped' && '⏭️' || '❌') }}
              -   MultiClassTests: ${{ needs.run_multi_class_tests.result == 'success' && '✅' || (needs.run_multi_class_tests.result == 'skipped' && '⏭️' || '❌') }}
              -   MultiLabelTests: ${{ needs.run_multi_label_tests.result == 'success' && '✅' || (needs.run_multi_label_tests.result == 'skipped' && '⏭️' || '❌') }}
              -   OvRTests: ${{ needs.run_ovr_tests.result == 'success' && '✅' || (needs.run_ovr_tests.result == 'skipped' && '⏭️' || '❌') }}
              -   OvOTests: ${{ needs.run_ovo_tests.result == 'success' && '✅' || (needs.run_ovo_tests.result == 'skipped' && '⏭️' || '❌') }}
              - コードレビュー: ${review_status}
              `
            });
